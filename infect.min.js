(function(root,factory){if(typeof define==="function"&&define.amd){define(factory)}else{if(typeof exports==="object"){module.exports=factory()}else{root.infect=factory()}}}(this,function(){var strains={},op="$",type=Function.prototype.call.bind(Object.prototype.toString);function infect(name,value){var i,key,args,argCount;if(typeof name==="string"&&value&&value instanceof Object){strains[name]=value}else{if(typeof name==="string"&&value===undefined){return strains[name]||undefined}else{if(type(name)==="[object Object]"&&value instanceof Array){i=value.length;for(;i--;){key=value[i];if(typeof key!=="string"){throw" :: infect.js => Keys must be strings"}name[key]=infect(key);if(name[key]===undefined){throw" :: infect.js => Could not inject "+arg}}return name}else{if(type(name)==="[object Function]"){value=value||{};args=/\(([^)]+)/.exec(name.toString())[1];if(args){args=args.split(/\s*,\s*/)}i=argCount=args.length;for(;i--;){key=args[i];if(key.indexOf(op)!==0){args=args.slice(i+1);break}args[i]=infect(key.substr(1))}return function(){var arguments=Array.prototype.slice.call(arguments),len=arguments.length+args.length;for(;len<argCount;len++){arguments.push(undefined)}if(len>argCount){throw" :: infect.js => Too many parameters! I expected <= "+(argCount-args.length)+" but got "+arguments.length}arguments=arguments.concat(args);name.apply(value,arguments)}}else{throw" :: infect.js => invalid use of infect("+type(name)+", "+type(value)+")"}}}}}return infect}));