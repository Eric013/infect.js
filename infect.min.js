(function(e,t){if(typeof define==="function"&&define.amd){define(t)}else if(typeof exports==="object"){module.exports=t()}else{e.infect=t()}})(this,function(){function infect(name,value,scope){var params,paramsText,func,origArgs;if(typeof name==="string"&&value&&"object|function".indexOf(typeof value)!==-1){strains[name]=value}else if(typeof name==="string"&&value===undefined){return strains[name]||null}else if(typeof name==="function"&&value instanceof Array){scope=scope||{};func=name;params=value;params.unshift("arguments");paramsText=params.join(",");params=getStrains(params);func=func.toString();origArgs=func.match(/^function\s*[^\(]*\(\s*([^\)]*)\)/m)[1];paramsText+=origArgs.split(" ").join("").length>0?",":"";func=eval("("+func.replace(origArgs,paramsText+origArgs)+")");return function(){var e=Array.prototype.concat.apply(params,arguments);e[0]=arguments;func.apply(scope,e)}}else{throw" :: infect.js => invalid use of infect()"}}function getStrains(e){var t,n,r;for(t=1,n=e.length;t<n;t++){r=e[t];if(typeof r!=="string"){throw" :: infect.js => Keys must be strings"}e[t]=strains[r]||undefined;if(e[t]===undefined){throw" :: infect.js => Could not inject "+r}}return e}var strains={};return infect})